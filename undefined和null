
	* 大多数计算机语言，有且仅有一个表示“无”的值，比如，C语言的NULL，Java语言的NULL，Python语言的None，Ruby语言的nil
	* 但是JavaScript语言有两个表示“无”的值：undefined和null
	* 
		* 在JS中中，将一个变量赋值为undefined或null，几乎没有什么区别，下面代码中，a变量被赋值为undefined和null，这两种写发几乎等价。undefine和null在if语句中，都会被自动转为false，相等运算符甚至直接报告两者相等


var a = undefined；
var a = null；
if(!undefined)
     console.log('undefined is false');
//undefined is false

if(!null)
     console.log('null is false');
//null is false

undefined==null
//true

	* 历史原因
	* 
		* 这与JavaScript的历史有关。1995年JavaScript诞生时，最初就像Java一样，只设置了null作为表示“无”的值
		* 根据C语言的传统 null 被设计成可以自动转为0
		* Javascript的设计者觉得这样做还不够有两个原因
		* 
			* null像在Java里一样，被当成一个对象，但是，JavaScript得数据类型分为原始类型（primitive）和合成类型（complex）两大类，他觉得表示“无”的值最好不是对象
			* 其次，JavaScript的最初版本没有包括错误处理机制，发生数据类型不匹配时，往往是自动转换类型或者默默失败。BrendanErich觉得，如果null自动转为0，很不容易发现错误
			* 因此BrendanErich又设计了一个undefined



Number(null)
//0

5 + null
//5

	* 最初设计
	* 
		* JavaScript最初版本是这样区分的：null是一个表示“无 ”的对象，转为数值是为0；undefined是一个表示无的原始值，转为数值时为NaN


Number（undefined）
//NaN

5+undefined
//NaN

	* 目前用法
	* 
		* 但是，上面这样区分，在实践中很快就被证明不可行。目前，null和undefined基本是同义的，只有一些细微的差别
		* null表示“没有对象”，即该处不应该有值，典型用法是



	* 作为函数的参数，表示函数的参数不是对象
	* 作为对象原型链的终点

Object.getPrototypeOf(Object.prototype)
// null

	* 
		* undefined表示“缺少值”，就是此处应该有一个值，但是还没有定义。典型用法是



	* 变量被声明了但是还没有赋值，就等于undefined
	* 调用函数时，应该提供的参数没有提供，该参数等于undefined
	* 对象没有赋值的属性，该属性的值为undefined
	* 函数没有返回值是，默认返回undefined

var i;
i//undefined

function f(x){console.log(x)}
f()//undefined

var o=new Object();
o.p//undefined

var x=f();
x//undefined


	* null表示"没有对象"，即该处不应该有值。
undefined表示"缺少值"，就是此处应该有一个值，但是还没有定义。

